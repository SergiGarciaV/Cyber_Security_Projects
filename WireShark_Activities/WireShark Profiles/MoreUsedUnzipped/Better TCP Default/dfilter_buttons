# This file is automatically generated, DO NOT MODIFY.
"TRUE","InstaStream","(tcp.stream==${tcp.stream})","Instantly give me the TCP Stream for the packet I am on"
"TRUE","T.A.F.","tcp.analysis.flags","TCP Analysis Flags - TCP Issues?"
"TRUE","3WayHS//SYNonly","tcp.flags == 02","Just SYN Packets"
"TRUE","3WayHS//SYN-ACK","tcp.flags.syn == 1 && tcp.flags.ack==1","Just the SYN-ACK Packets"
"TRUE","3WayHS//All 3 Packets","tcp.flags.syn == 1 or (tcp.flags == 0x010 and tcp.len == 0 and tcp.seq == 1 and tcp.nxtseq == 1 and tcp.ack == 1)","All 3 packets of the TCP 3-way Handshake"
"TRUE","3WayHS//SYN-NoSACK","(tcp.flags.syn == 1) && !(tcp.options.sack_perm == 04:02)","SYN Packets with No SACK"
"TRUE","3WayHS//SYNorSYNACK","tcp.flags.syn == 1","Just SYN and/or SYN-ACK"
"TRUE","3WayHS//TCP MSS Small","!(tcp.options.mss_val or tcp.options.mss lt 1000) && (tcp.flags.syn == 1)","Small MSS size"
"TRUE","3WayHS//More than one SACK","tcp.options.sack.count gt 1","More than one SACK"
"TRUE","3WayHS//Unexpected Handshake Options//Server WinScale 1","tcp.options.wscale.multiplier eq 1 and tcp.flags.ack and tcp.flags.syn eq 1","Server WIndow cale of 1"
"TRUE","3WayHS//Unexpected Handshake Options//Server no SACK_Perm","tcp.flags.syn == 1 and tcp.flags.ack==1 and not tcp.options.sack_perm","SYN Packets with No SACK"
"TRUE","Timing//TCP Delta >.500","tcp.time_delta >0.5 && tcp.flags.fin == 0 && tcp.flags.reset == 0 ","TCP Delta greater than half of a second. Removed FINs and RSTs."
"TRUE","Timing//Time Range","frame.time gt \x22Oct 18, 2018 12:50:00\x22 and frame.time lt \x22Oct 18, 2018 12:59:00\x22","Set the time/Date Range"
"TRUE","Timing//Pause=1+ms","(frame.time_delta > 0.001)",""
"TRUE","Timing//Pause=10+ms","(frame.time_delta > 0.01)",""
"TRUE","Timing//Pause=100+ms","(frame.time_delta > 0.1)",""
"TRUE","TCP Reset//Reset","tcp.flags.reset eq 1","TCP Resets"
"TRUE","TCP Reset//Reset Response to SYN","tcp.flags.reset==1 and tcp.seq in {0, 1} and tcp.ack in {0, 1}","Resets for Syn"
"TRUE","Retrans//TCP Retrans (F/S)","(tcp.analysis.retransmission || tcp.analysis.fast_retransmission)",""
"TRUE","Retrans//Packet Loss//Retransmissions","(tcp.analysis.retransmission) && !(tcp.flags.fin == 1)","Goal - get a percentage in the status bar of packet loss.  FIN packets are filtered out because they don't matter if they are retransmitted, the conversation was already over. "
"TRUE","Retrans//Packet Loss//Spurious Retransmission","tcp.analysis.spurious_retransmission","The ACK for a packet was dropped so the Sender retransmitts. Wireshark has seen the transmission, ACK and retransmission so it marks it superfluous.  If the capture had been taken at the Sender, only the transmission and retransmission would be seen."
"TRUE","Retrans//Packet Loss//Server SYN/ACK Retransmit","(tcp.flags.syn == 1 and tcp.analysis.retransmission) && (tcp.flags.ack == 1)","Goal: How many times the server response to SYN has to be retransmitted. Is it normal packet loss or is it firewall drops?"
"TRUE","Retrans//Packet Loss or Dropped by Firewall//SYN Retransmission","(tcp.flags.syn == 1 and tcp.analysis.retransmission) && (tcp.flags.ack == 0)","Goal - does the clent have to retrans - is it normal loss, or server overload or firewall overload"
"TRUE","Retrans//Packet Loss or Dropped by Firewall//Handshake Retransmit SYN || SYNACK","tcp.flags.syn == 1 and tcp.analysis.retransmission","Retransmitted SYN Packets"
"TRUE","Retrans//DUP ACK//1st DUP ACK","tcp.analysis.duplicate_ack_num==1","Packets with at least one Duplicate ACK"
"TRUE","Retrans//DUP ACK//More than 1 DUP ACK","tcp.analysis.duplicate_ack_num>=2","Packets with more than one Duplicate ACKs"
"TRUE","Retrans//DUP ACK//2nd DUP ACK","tcp.analysis.duplicate_ack_num==2","Packets with at least two Duplicate ACKs"
"TRUE","Retrans//DUP ACK//1st and 2nd DUP ACKs","tcp.analysis.duplicate_ack_num<=2","Packets with at one or two Duplicate ACKs"
"TRUE","Retrans//DUP ACK//3rd DUP ACK","tcp.analysis.duplicate_ack_num==3","Packets with at least three Duplicate ACKs"
"TRUE","Retrans//DUP ACK//>3 DUP ACKs","tcp.analysis.duplicate_ack_num>3","Packets with greater than three Duplicate ACKs"
"TRUE","Win Size//Zero Window//Zero Window","tcp.analysis.zero_window","You can't send data if I tell you my window size is zero, you just have to back off and wait patiently until I send a Window Update.  Who is the source? It is their fault (either lack of resources or software not pulling up the data)."
"TRUE","Win Size//Zero Window//WinZero Recovery For Selected Stream","tcp.stream == ${tcp.stream} and (tcp.analysis.window_update or tcp.analysis.zero_window)","How long before the Window Update?"
"TRUE","Win Size//Zero Window//ZeroWindow Fault Isolation For Selected Stream","tcp.stream == ${tcp.stream} and (tcp.analysis.window_full or tcp.analysis.zero_window)","Look at the time between the window full and zero window. If it is microseconds, it is probably the application not taking the data and TCP is aware.  If it is 200 milliseconds or whatever the default TCP ACK Wait timer for your environment, it is probably a resource issue because TCP was not aware."
"TRUE","Win Size//Zero Window//ZeroWindow Fault Isolation","tcp.analysis.window_full or tcp.analysis.zero_window","Look at the time between the window full and zero window. If it is microseconds, it is probably the application not taking the data and TCP is aware.  If it is 200 milliseconds or whatever the default TCP ACK Wait timer for your environment, it is probably a resource issue because TCP was not aware."
"TRUE","Win Size//Zero Window//WinZero Recovery","tcp.analysis.window_update or tcp.analysis.zero_window","How long before the Window Update?"
"TRUE","Win Size//Zero Window//WinZero Recovery For Selected Stream","tcp.stream == ${tcp.stream} and (tcp.analysis.window_update or tcp.analysis.zero_window)","How long before the Window Update for the selected stream?"
"TRUE","Win Size//Small Window < 500","tcp.window_size lt 500 && tcp.window_size gt 0 && !tcp.window_size_scalefactor == -1 && tcp.flags.fin == 0 && tcp.flags.reset == 0","Window size smaller than 500 bytes"
"TRUE","Win Size//Small Window < 1000","tcp.window_size lt 1000 && tcp.window_size gt 0 && !tcp.window_size_scalefactor == -1 && tcp.flags.fin == 0 && tcp.flags.reset == 0","Window size smaller than 1000 bytes"
"TRUE","Win Size//Server WinScale 1","tcp.options.wscale.multiplier eq 1 and tcp.flags.ack and tcp.flags.syn eq 1","Servers should have higher scale factor than 1 - possible resource issue"
"TRUE","Win Size//No WinScale","tcp.window_size_scalefactor == -2","Window scaling is awesome, why aren't they taking advantage of it?  Check the handshake to see who's fault it is.  Scaling gives a bigger window size and lessens the possiblity of filling the window and therefore having to back off."
"TRUE","Flags//SYN (no ACK)","tcp.flags.syn==1 && tcp.flags.ack==0 && tcp.ack==0",""
"TRUE","Flags//SYN+ACK","tcp.flags.syn==1 && tcp.flags.ack==1 && tcp.seq==1 && tcp.ack==1",""
"TRUE","Flags//PUSH","tcp.flags.push == 1",""
"TRUE","TCP_Completeness//Anything Abnormal","tcp.completeness in {7,33,47,55}","Anything Abmornal in TCP Completeness"
"TRUE","TCP_Completeness//SYN Only - Incomplete","tcp.completeness eq 1","Only SYN packets - possible scan?"
"TRUE","TCP_Completeness//SYN+SYN ACK Only - Incomplete","tcp.completeness eq 3","Client Side Establishment - missing ACK?"
"TRUE","TCP_Completeness//SYN+SYN ACK+ACK Only - Incomplete","tcp.completeness eq 7","3 Way Handshake done, but then nothing"
"TRUE","TCP_Completeness//Handshake+DATA - Incomplete","tcp.completeness eq 15","3 Way Handshake done, then DATA but no FIN"
"TRUE","TCP_Completeness//DATA + FIN(s) - Normal Complete","tcp.completeness eq 31","Normal conversation - with good Termination FIN-ACK, FIN-ACK"
"TRUE","TCP_Completeness//DATA + FIN + RST - Complete but Reset","tcp.completeness eq 64","Normal conversation - with good Termination FIN-ACK, RST - Server bailed out"
"TRUE","TCP_Completeness//DATA + FIN + RST - Complete but Reset, No DATA","tcp.completeness eq 55","Abnormal conversation - Connection, with Termination FIN-ACK, RST - Server bailed out and No DATA"
"TRUE","TCP_Completeness//SYN+RST - Incomplete","tcp.completeness eq 33","Abnormal conversation - Connection not being allowed"
"TRUE","TCP_Completeness//Data + RST - Incomplete","tcp.completeness eq 47","Conversation ended with RST.  If that came after the other side's FIN, it is not a problem (it is bad form though).  If the RST comes mid conversation, that is a problem."
"TRUE","TCP Analysis//Out Of Order","(tcp.analysis.out_of_order)",""
"TRUE","TCP Analysis//DupAck","tcp.analysis.duplicate_ack",""
"TRUE","TCP Analysis//TCP Win Full","tcp.analysis.window_full",""
"TRUE","TCP Analysis//TCP Zero Win","tcp.analysis.zero_window",""
"TRUE","TCP Analysis//TCP Win (Full or Zero)","(tcp.analysis.window_full || tcp.analysis.zero_window)",""
"TRUE","TCP Analysis//TCP Packet Drops"," tcp.analysis.lost_segment ||tcp.analysis.ack_lost_segment","Capture drops: pcap file missing TCP segments due to capture limitations"
"TRUE","L2//ARP","arp","ARP Packets"
"TRUE","L2//STP","stp","Spanning Tree Packets"
"TRUE","L2//L2 Broadcasts","eth.addr == ff:ff:ff:ff:ff:ff","L2 Ethernet Broadcasts"
"TRUE","L2//OUI//Cisco OUI","eth.addr_resolved contains Cisco","Cisco OUI Packets"
"TRUE","L2//OUI//HP OUI","eth.addr_resolved contains Hewlett","CHewlett-Packard OUI Packets"
"TRUE","L3//IPv4 Only","ip","Show only IPv4 Packets"
"TRUE","L3//IPv4 Address","ip.addr == 192.0.2.1","Edit for a particular IP Address"
"TRUE","L3//Not this IPv4 Address","!(ip.addr == 192.0.2.1)",""
"TRUE","L3//HDR > 20 Bytes","ip.hdr_len > 20","IPv4 Packets with headers that are greater than 20 bytes"
"TRUE","L3//TTL < 8","ip.ttl < 8","IPv4 Packets with a TTL Value less than 8"
"TRUE","L3//IPv4 Fragments","(ip.flags.mf == 1) or !(ip.frag_offset==0)","IPv4 Fragment Packets"
"TRUE","L3//Not Best Effort","ip.dsfield.dscp > 0","IPv4 Packets that are not Best Effort QoS"
"TRUE","L3//Same Country IPv4","ip.geoip.country_iso == ${ip.geoip.country_iso}","Same Country as selected packet"
"TRUE","Other//Time Range","frame.time gt \x22Oct 18, 2018 12:50:00\x22 and frame.time lt \x22Oct 18, 2018 12:59:00\x22",""
"TRUE","Other//Other than TCP Traffic","stp or cdp or lldp or ssdp or nbns or afp or arp or llmnr or mdns or udp.dstport in {17500}","Goal - see the noise | broadcast | multicast - stp|cdp|lldp|ssdp|nbns|afp|arp|llmnr|mdns|DropboxSync"
"TRUE","Other//Filter Other than TCP Traffic","not (stp or cdp or lldp or ssdp or nbns or afp or arp or llmnr or mdns or udp.dstport in {17500})","Goal - filter out the noise | broadcast | multicast - stp|cdp|lldp|ssdp|nbns|afp|arp|llmnr|mdns|DropboxSync"
